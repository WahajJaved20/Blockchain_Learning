// running JS code
// node (filename).js
// Printing -> console.log("hi");
// making variables
// let,var,const
// the best way to do it is to wrap everything in main and call it

// ASYNC functions -> wait for a certain event to fulfill the promise and then start its execution
// we are mostly working with async function since we have to wait for some events like
// deploying a contract before we actuallay start working with it

// we are using SOLC to work with compilation of solidity
//installation {yarn add solc@0.8.7-fixed} the version is same as the solidity version

// compilation command
// yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . simpleStorage.sol
// create a binary file and abi file with node_modules included and base path current folder and output current folder and the file

// adding this line to packages.json
/*
"scripts": {
    "compile" : "yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . simpleStorage.sol"
  }
  this will help us so if we write compile it will automatically run this line
  just write 
  yarn compile
*/

//technically importing ethers.js to control the blockchain
const ethers = require("ethers");
const fs = require("fs");
// this line pulls up all our env variables
require("dotenv").config();
// The next part is setting up the blockchain
// we are using ganache to set up a fake blockchain on our local PC
// RPC server in ganache http://127.0.0.1:7545
// connect to the wsl based link
async function main() {
  // telling the code to connect to this url here
  const provider = new ethers.providers.JsonRpcProvider(
    process.env.RPC_MAINNET_URL
  );
  await provider.ready;
  // setting up a wallet using private key from any account created by ganache
  // read the encrypted key json back into the code
  const encryptedJson = fs.readFileSync("./.encryptedKey.json");
  //importing private key from env
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  // making the wallet from key now
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  console.log("Deploying ...");
  // connecting the wallet to provider manually now
  wallet = await wallet.connect(provider);
  const abi = await fs.readFileSync(
    "./simpleStorage_sol_SimpleStorage.abi",
    "utf-8"
  );
  const binary = await fs.readFileSync(
    "./simpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );

  // this helps in deploying the contracts
  const contractFactory = await new ethers.ContractFactory(abi, binary, wallet);
  //finally deploying
  const contract = await contractFactory.deploy();
  //get confirmation from blocks
  //get confirmation from only one block with wait
  await contract.deployTransaction.wait(1);
  // this retrieve is from our contract
  const currentFavNum = await contract.retrieve();
  // this returns a big number since javascript has a hard time with decimals
  //printing using string interpolation
  console.log(`Current Favorite Number: ${currentFavNum.toString()}`);
  // gives 0 since not specified
  console.log("Updating...");
  const response = await contract.store("69");
  // this line is imp coz there are chances that retrieve is called before
  await response.wait(1);
  const newFav = await contract.retrieve();
  console.log(`New Favorite Number: ${newFav.toString()}`);
  // //SENDING RAW TRANSACTION

  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 200000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   // the data is binary code of the contract
  //   data: "0x60806040526040518060400160405280601781526020016040518060400160405280600581526020017f576168616a000000000000000000000000000000000000000000000000000000815250815250600160008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61087a8061019f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100ee5780636f760f411461010a57806377ec2b55146101265780639e7a13ad146101455761007d565b80632e64cec1146100825780632fae4ffd146100a0578063471f7cdf146100d0575b600080fd5b61008a610176565b6040516100979190610633565b60405180910390f35b6100ba60048036038101906100b591906104d1565b61017f565b6040516100c79190610633565b60405180910390f35b6100d86101ad565b6040516100e59190610633565b60405180910390f35b61010860048036038101906101039190610576565b6101b3565b005b610124600480360381019061011f919061051a565b6101bd565b005b61012e610253565b60405161013c92919061064e565b60405180910390f35b61015f600480360381019061015a9190610576565b6102ed565b60405161016d92919061064e565b60405180910390f35b60008054905090565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60005481565b8060008190555050565b6000604051806040016040528083815260200184815250905060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102289291906103a9565b5050508160048460405161023c919061061c565b908152602001604051809103902081905550505050565b600180600001549080600101805461026a90610747565b80601f016020809104026020016040519081016040528092919081815260200182805461029690610747565b80156102e35780601f106102b8576101008083540402835291602001916102e3565b820191906000526020600020905b8154815290600101906020018083116102c657829003601f168201915b5050505050905082565b600381815481106102fd57600080fd5b906000526020600020906002020160009150905080600001549080600101805461032690610747565b80601f016020809104026020016040519081016040528092919081815260200182805461035290610747565b801561039f5780601f106103745761010080835404028352916020019161039f565b820191906000526020600020905b81548152906001019060200180831161038257829003601f168201915b5050505050905082565b8280546103b590610747565b90600052602060002090601f0160209004810192826103d7576000855561041e565b82601f106103f057805160ff191683800117855561041e565b8280016001018555821561041e579182015b8281111561041d578251825591602001919060010190610402565b5b50905061042b919061042f565b5090565b5b80821115610448576000816000905550600101610430565b5090565b600061045f61045a846106a3565b61067e565b90508281526020810184848401111561047b5761047a61080d565b5b610486848285610705565b509392505050565b600082601f8301126104a3576104a2610808565b5b81356104b384826020860161044c565b91505092915050565b6000813590506104cb8161082d565b92915050565b6000602082840312156104e7576104e6610817565b5b600082013567ffffffffffffffff81111561050557610504610812565b5b6105118482850161048e565b91505092915050565b6000806040838503121561053157610530610817565b5b600083013567ffffffffffffffff81111561054f5761054e610812565b5b61055b8582860161048e565b925050602061056c858286016104bc565b9150509250929050565b60006020828403121561058c5761058b610817565b5b600061059a848285016104bc565b91505092915050565b60006105ae826106d4565b6105b881856106df565b93506105c8818560208601610714565b6105d18161081c565b840191505092915050565b60006105e7826106d4565b6105f181856106f0565b9350610601818560208601610714565b80840191505092915050565b610616816106fb565b82525050565b600061062882846105dc565b915081905092915050565b6000602082019050610648600083018461060d565b92915050565b6000604082019050610663600083018561060d565b818103602083015261067581846105a3565b90509392505050565b6000610688610699565b90506106948282610779565b919050565b6000604051905090565b600067ffffffffffffffff8211156106be576106bd6107d9565b5b6106c78261081c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610732578082015181840152602081019050610717565b83811115610741576000848401525b50505050565b6000600282049050600182168061075f57607f821691505b60208210811415610773576107726107aa565b5b50919050565b6107828261081c565b810181811067ffffffffffffffff821117156107a1576107a06107d9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610836816106fb565b811461084157600080fd5b5056fea26469706673582212202c6a8c2ba0fb952d72d10e9b8dc47a44be6f87468b5930c59243a912fffc9e1964736f6c63430008070033",
  //   chainId: 1337,
  // };
  // // signed a transaction
  // //const signedTxResponse = await wallet.signTransaction(tx);
  // //signed by send transaction itself
  // // sending a transaction
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);
}
// wait for the main function to end and display errors if any
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

// In order to save our .env files like not pushing them to github
// we can make a .gitignore file
// then write the names of the files we dont want to push
